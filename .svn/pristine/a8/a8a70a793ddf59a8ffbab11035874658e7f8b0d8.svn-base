package ievent

import org.springframework.dao.DataIntegrityViolationException
import static java.util.UUID.randomUUID
/*Import para la generacion de PDFs*/
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.Barcode39;
import com.itextpdf.text.pdf.Barcode128;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPCell
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Header;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfReader
import com.itextpdf.text.Document;

import com.itextpdf.text.PageSize
import com.itextpdf.text.FontFactory
import com.itextpdf.text.pdf.BaseFont
import com.itextpdf.text.Chunk
import java.awt.Color



class EventController {

    static allowedMethods = [save: "POST", update: "POST", delete: "POST"]
    def mailService

    def index() {
        redirect(action: "list", params: params)
    }

    def list() {
        params.max = Math.min(params.max ? params.int('max') : 10, 100)
        [eventInstanceList: Event.list(params), eventInstanceTotal: Event.count()]
    }

    def create() {
        [eventInstance: new Event(params)]
    }

    def save() {
        def eventInstance = new Event(params)
        if (!eventInstance.save(flush: true)) {
            render(view: "create", model: [eventInstance: eventInstance])
            return
        }

        flash.message = message(code: 'default.created.message', args: [message(code: 'event.label', default: 'Event'), eventInstance.id])
        redirect(action: "show", id: eventInstance.id)
    }

    def show() {
        def eventInstance = Event.get(params.id)
        if (!eventInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "list")
            return
        }

        [eventInstance: eventInstance]
    }

    def edit() {
        def eventInstance = Event.get(params.id)
        if (!eventInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "list")
            return
        }

        [eventInstance: eventInstance]
    }

    def update() {
        def eventInstance = Event.get(params.id)
        if (!eventInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "list")
            return
        }

        if (params.version) {
            def version = params.version.toLong()
            if (eventInstance.version > version) {
                eventInstance.errors.rejectValue("version", "default.optimistic.locking.failure",
                        [message(code: 'event.label', default: 'Event')] as Object[],
                        "Another user has updated this Event while you were editing")
                render(view: "edit", model: [eventInstance: eventInstance])
                return
            }
        }

        eventInstance.properties = params

        if (!eventInstance.save(flush: true)) {
            render(view: "edit", model: [eventInstance: eventInstance])
            return
        }

        flash.message = message(code: 'default.updated.message', args: [message(code: 'event.label', default: 'Event'), eventInstance.id])
        redirect(action: "show", id: eventInstance.id)
    }

    def delete() {
        def eventInstance = Event.get(params.id)
        if (!eventInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "list")
            return
        }

        try {
            eventInstance.delete(flush: true)
            flash.message = message(code: 'default.deleted.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "list")
        }
        catch (DataIntegrityViolationException e) {
            flash.message = message(code: 'default.not.deleted.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "show", id: params.id)
        }
    }

    def inscription(){
        def eventInstance = Event.read(params.id)
        def participantInstance =  new Participants()
        [participantInstance: participantInstance, eventInstance: eventInstance]
    }

    def saveInscription(){
        def eventInstance = Event.read(params.idEvent)
        def participantInscane = new Participants(params)
        participantInscane.evet = eventInstance
        participantInscane.registerDate = new Date()
        if (!participantInscane.save(flush: true)) {
            render(view: "create", model: [eventInstance: participantInscane])
            return
        }
        eventInstance.phase.each {
            def participantPhase = new ParticipantPhases(participant: participantInscane, phase: it, checkPhase: false, checkDatePhase: null)
            participantPhase.save(flush: true)
        }
        flash.message = message(code: 'default.created.message', args: [message(code: 'event.label', default: 'Event'), participantInscane.id])
        redirect(action: "createPdf", id: participantInscane.id)
    }

    def successfullRegister(){
        def participantInstance = Participants.read(params.id)
        [participantInstance: participantInstance]
    }

    def createPdf(){
        def participantInstance = Participants.read(params.id)
        def filename = (randomUUID() as String)+".pdf"

        def pathPdf = servletContext.getRealPath('images')+"/pdf_files/"+filename
        Document document = new Document(PageSize.LETTER,0,0,38,0)

        def fontPath = servletContext.getRealPath('images')+"/fonts/Cambria.ttf"
        
        println(fontPath)

        BaseFont cambria = BaseFont.createFont(fontPath, BaseFont.CP1252, BaseFont.EMBEDDED)

        BaseColor subtitleBackColor = new BaseColor(91,155,213)
        BaseColor subtitleTextColor = new BaseColor(255,255,255)

        Font titleFont = new Font(cambria, 16, Font.BOLD)
        Font subTitleFont = new Font(cambria, 14, Font.BOLD)
        subTitleFont.setColor(subtitleTextColor)
        Font normalFont = new Font(cambria,8, Font.NORMAL)
        Font normalFontBold = new Font(cambria,8, Font.BOLD)

        try{
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(pathPdf))

            document.setMargins(20, 20, 70, 20)
            document.open()

            PdfContentByte cb = pdfWriter.getDirectContent()
            Barcode128 code128 = new Barcode128();
            code128.setCode(participantInstance.id+"-"+participantInstance.idCardNumber)
            Image barCodeImage = code128.createImageWithBarcode(cb, null, null)

            println(participantInstance.id+"-"+participantInstance.idCardNumber)
            def pathUmsaImage = createLinkTo(dir: "images", file: "umsa_logo.png",absolute: true)
            Image logoUmsa = Image.getInstance(new URL(pathUmsaImage.toString()))
            def pathDipgisImage = createLinkTo(dir: "images", file: "logodipgis.png",absolute: true)
            Image logoDipgis = Image.getInstance(new URL(pathDipgisImage.toString()))

            PdfPTable tableHeader = new PdfPTable(3)
            tableHeader.setSpacingBefore(100f)
            float[] columnHeader = [40f,460f,50f]
            PdfPCell headerLeft = new PdfPCell(logoUmsa,true)
            headerLeft.setPaddingBottom(10f)
            headerLeft.setBorder(Rectangle.BOTTOM)
            PdfPCell headerCenter = new PdfPCell(new Phrase("UNIVERSIDAD MAYOR DE SAN ANDRÉS \n DEPARTAMENTO DE INVESTIGACIÓN POSTGRADO E INTERACCIÓN SOCIAL",titleFont))
            headerCenter.setBorder(Rectangle.BOTTOM)
            headerCenter.setHorizontalAlignment(1)
            PdfPCell headerRight = new PdfPCell(logoDipgis,true)
            headerRight.setBorder(Rectangle.BOTTOM)
            tableHeader.setWidths(columnHeader)
            tableHeader.addCell(headerLeft)
            tableHeader.addCell(headerCenter)
            tableHeader.addCell(headerRight)

            PdfPTable tableCodeBar = new PdfPTable(3)
            float[] columTres = [200f,150f,200f]
            tableCodeBar.setWidths(columTres)
            tableCodeBar.getDefaultCell().setBorder(0)
            tableCodeBar.setSpacingBefore(50f)
            PdfPCell barCodeContainer = new PdfPCell(barCodeImage)
            barCodeContainer.setBorder(1)
            barCodeContainer.setHorizontalAlignment(1)
            barCodeContainer.setVerticalAlignment(1)
            barCodeContainer.setPaddingTop(10f)
            barCodeContainer.setPaddingBottom(10f)
            tableCodeBar.addCell(new Phrase(""))
            tableCodeBar.addCell(barCodeContainer)
            tableCodeBar.addCell(new Phrase(""))

            PdfPTable tableContent = new PdfPTable(1)
            tableContent.getDefaultCell().setBorder(2)
            tableContent.setSpacingBefore(20f)

            PdfPCell contentTitle = new PdfPCell(new Phrase(message(code: 'default.successfull.message', default: 'Successfull Register'), titleFont))
            contentTitle.setHorizontalAlignment(1)
            contentTitle.setBorder(0)
            PdfPCell eventTitle = new PdfPCell(new Phrase(participantInstance.evet.eventName, titleFont))
            eventTitle.setHorizontalAlignment(1)
            eventTitle.setBorder(0)

            tableContent.addCell(contentTitle)
            tableContent.addCell(eventTitle)


            PdfPTable personalInformation = new PdfPTable(2)
            personalInformation.getDefaultCell().setBorder(1)
            personalInformation.setSpacingBefore(20f)

            PdfPCell titlePersonal = new PdfPCell(new Phrase(message(code: 'personal.information.label',default: 'Personal Information'),subTitleFont))
            titlePersonal.setBackgroundColor(subtitleBackColor)
            titlePersonal.setBorder(0)
            titlePersonal.setColspan(2)

            PdfPCell emptyCell = new PdfPCell(new Phrase(""))
            emptyCell.setBorder(0)


            PdfPCell titleNames = new PdfPCell(new Phrase(message(code: 'default.name.label')+": ",normalFontBold))
            titleNames.setBorder(0)
            PdfPCell names = new PdfPCell(new Phrase(participantInstance.name,normalFont))
            names.setBorder(0)
            PdfPCell titleSurnames = new PdfPCell(new Phrase(message(code: 'default.surnames.label')+": ",normalFontBold))
            titleSurnames.setBorder(0)
            PdfPCell surnames = new PdfPCell(new Phrase(participantInstance.surnames,normalFont))
            surnames.setBorder(0)
            PdfPCell titleId = new PdfPCell(new Phrase(message(code: 'default.idNumber.label')+": ",normalFontBold))
            titleId.setBorder(0)
            PdfPCell idNumber = new PdfPCell(new Phrase(participantInstance.idCardNumber,normalFont))
            idNumber.setBorder(0)
            PdfPCell titleCountry = new PdfPCell(new Phrase(message(code: 'default.country.label')+": ",normalFontBold))
            titleCountry.setBorder(0)
            PdfPCell country = new PdfPCell(new Phrase(""+t.outNull(text: participantInstance.country),normalFont))
            country.setBorder(0)
            PdfPCell titleCity = new PdfPCell(new Phrase(message(code: 'default.city.label')+": ",normalFontBold))
            titleCity.setBorder(0)
            PdfPCell city = new PdfPCell(new Phrase(""+t.outNull(text: participantInstance.city),normalFont))
            city.setBorder(0)


            personalInformation.addCell(titlePersonal)
            personalInformation.addCell(titleNames)
            personalInformation.addCell(names)
            personalInformation.addCell(titleSurnames)
            personalInformation.addCell(surnames)
            personalInformation.addCell(titleId)
            personalInformation.addCell(idNumber)
            personalInformation.addCell(titleCountry)
            personalInformation.addCell(country)
            personalInformation.addCell(titleCity)
            personalInformation.addCell(city)

            PdfPTable contactInformation = new PdfPTable(2)
            contactInformation.setSpacingBefore(20f)
            PdfPCell contactTitle = new PdfPCell(new Phrase(message(code: 'contact.information.label'),subTitleFont))
            contactTitle.setBackgroundColor(subtitleBackColor)
            contactTitle.setColspan(2)
            contactTitle.setBorder(0)
            PdfPCell titlePhone = new PdfPCell(new Phrase(message(code: 'default.phoneNumber.label')+": ",normalFontBold))
            titlePhone.setBorder(0)
            PdfPCell phone = new PdfPCell(new Phrase(""+t.outNull(text: participantInstance.phoneNumber),normalFont))
            phone.setBorder(0)
            PdfPCell titleMail = new PdfPCell(new Phrase(message(code: 'default.email.label')+": ",normalFontBold))
            titleMail.setBorder(0)
            PdfPCell email = new PdfPCell(new Phrase(participantInstance.email,normalFont))
            email.setBorder(0)

            contactInformation.addCell(contactTitle)
            contactInformation.addCell(titlePhone)
            contactInformation.addCell(phone)
            contactInformation.addCell(titleMail)
            contactInformation.addCell(email)

            PdfPTable professionInformation = new PdfPTable(2)
            professionInformation.setSpacingBefore(20f)

            PdfPCell professionalTitle = new PdfPCell(new Phrase(message(code: 'professional.information.label'),subTitleFont))
            professionalTitle.setBackgroundColor(subtitleBackColor)
            professionalTitle.setColspan(2)
            professionalTitle.setBorder(0)
            PdfPCell titleInstitution = new PdfPCell(new Phrase(message(code: 'default.unity.label')+": ",normalFontBold))
            titleInstitution.setBorder(0)
            PdfPCell institution = new PdfPCell(new Phrase(""+t.outNull(text: participantInstance.unity),normalFont))
            institution.setBorder(0)
            PdfPCell titlePosition = new PdfPCell(new Phrase(message(code: 'default.position.label')+": ",normalFontBold))
            titlePosition.setBorder(0)
            PdfPCell position = new PdfPCell(new Phrase(""+t.outNull(text: participantInstance.position),normalFont))
            position.setBorder(0)
            PdfPCell titleProfession = new PdfPCell(new Phrase(message(code: 'default.profession.label')+": ",normalFontBold))
            titleProfession.setBorder(0)
            PdfPCell profession = new PdfPCell(new Phrase(""+t.outNull(text: participantInstance.profession),normalFont))
            profession.setBorder(0)

            professionInformation.addCell(professionalTitle)
            professionInformation.addCell(titleInstitution)
            professionInformation.addCell(institution)
            professionInformation.addCell(titlePosition)
            professionInformation.addCell(position)
            professionInformation.addCell(titleProfession)
            professionInformation.addCell(profession)

            PdfPTable importantNote = new PdfPTable(1)
            importantNote.setSpacingBefore(50f)
            PdfPCell titleNote = new PdfPCell(new Phrase(message(code: 'important.note.label'),subTitleFont))
            titleNote.setBorder(0)
            PdfPCell contentNote = new PdfPCell(new Phrase(message(code: 'important.note.content', args: [participantInstance.evet.eventName,participantInstance.evet.startDate.format('dd/MM/yyyy'),participantInstance.evet.endDate.format('dd/MM/yyyy'),participantInstance.evet.eventPlace]),normalFont))
            contentNote.setBorder(0)
            PdfPCell dateInscription = new PdfPCell(new Phrase(message(code: 'default.dateInscription.label')+": "+participantInstance.registerDate.format('dd/MM/yyyy'),normalFont))
            dateInscription.setHorizontalAlignment(2)
            dateInscription.setBorder(0)
            importantNote.addCell(titleNote)
            importantNote.addCell(contentNote)
            importantNote.addCell(dateInscription)

            PdfPTable footer = new PdfPTable(1)
            footer.setSpacingBefore(50f)
            PdfPCell dipgis = new PdfPCell(new Phrase(message(code: 'dipgis'),normalFont))
            dipgis.setBorder(0)
            dipgis.setHorizontalAlignment(1)
            PdfPCell address = new PdfPCell(new Phrase(message(code: 'address'),normalFont))
            address.setBorder(0)
            address.setHorizontalAlignment(1)
            PdfPCell phoneNumberAndMail = new PdfPCell(new Phrase(message(code: 'phoneDipgis'),normalFont))
            phoneNumberAndMail.setBorder(0)
            phoneNumberAndMail.setHorizontalAlignment(1)
            footer.addCell(dipgis)
            footer.addCell(address)
            footer.addCell(phoneNumberAndMail)

            document.add(tableHeader)
            document.add(tableContent)
            document.add(personalInformation)
            document.add(contactInformation)
            document.add(professionInformation)
            document.add(tableCodeBar)
            document.add(importantNote)
            document.add(footer)
            document.close()
        }catch (Exception e){
            e.printStackTrace();
        }

        def message = "<h1>Registro Exitoso!!<h1>"
        message+="<p>Agradecemos su interes y su asistencia.</p>"
        message+="<p>Por favor no olvide llevar su CONSTANCIA DE INCRIPCIÓN impresa para la atencion oportuna y eficiente.</p>"
        message+="Saludos."
        def sendmail = {
            mailService.sendMail {
                multipart true
                to participantInstance.email
                subject "Registro Exitoso"
                html message
                attachBytes "documento.pdf", "application/pdf",new File(servletContext.getRealPath('images')+"/pdf_files/"+filename).readBytes()
            }
        }
        render sendmail
        redirect( url: createLinkTo(dir: "images/pdf_files", file: filename, absolute: true))
    }

    def participantsList(){
        def eventInstance = Event.read(params.id)
        [eventInstance: eventInstance]
    }

    def controlParticipantList(){
        def eventInstance = Event.read(params.id)
        [eventInstance: eventInstance]
    }

    def checkPhase(){
        def phaseParticipantInstance = ParticipantPhases.get(params.id)
        phaseParticipantInstance.checkPhase = true
        return
    }
    def unCheckPhase(){
        def phaseParticipantInstance = ParticipantPhases.get(params.id)
        phaseParticipantInstance.checkPhase = false
        return
    }

    def participantsControl(){
        def eventInstance = Event.read(params.id)
        def currentPhase = null
        if (params.currentPhase){
            currentPhase = EventPhase.read(params.currentPhase)
        }

        def activeParticipants = ParticipantPhases.where {
            phase == currentPhase
        }
        activeParticipants.each {
            println(it.participant.name)
        }
        [eventInstance: eventInstance, currentPhase: currentPhase, participantsPhases: activeParticipants]
    }

    def checkBarCode(){
        def capture = params.dataCapture.toString()
        def codeParticipant = capture.split("'")
        def participantInstance = Participants.read(codeParticipant[0])
        def phaseInstance = EventPhase.read(params.phaseId)
        println(participantInstance)
        println(phaseInstance)

        def participantPhaseInsatnce = ParticipantPhases.findByParticipantAndPhase(participantInstance,phaseInstance)
        participantPhaseInsatnce.checkPhase = true
        participantPhaseInsatnce.checkDatePhase = new Date()
        participantPhaseInsatnce.save()
        println(participantPhaseInsatnce)
        redirect(action: "participantsControl", params: [id: phaseInstance.event.id, currentPhase: phaseInstance.id])
    }

    def editParticipant(){
        def eventInstance = Event.read(params.event)
        def participantInstance= Participants.read(params.id)
        [eventInstance:eventInstance, participantInstance: participantInstance]
    }

    def updateParticipant(){
        def participantInstance = Participants.get(params.id)
        println(params)
        if (!participantInstance) {
            flash.message = message(code: 'default.not.found.message', args: [message(code: 'event.label', default: 'Event'), params.id])
            redirect(action: "list")
            return
        }

        if (params.version) {
            def version = params.version.toLong()
            if (participantInstance.version > version) {
                participantInstance.errors.rejectValue("version", "default.optimistic.locking.failure",
                        [message(code: 'event.label', default: 'Event')] as Object[],
                        "Another user has updated this Event while you were editing")
                render(view: "edit", model: [eventInstance: participantInstance])
                return
            }
        }

        participantInstance.properties = params
        println(participantInstance.properties)
        if (!participantInstance.save(flush: true)) {
            render(view: "edit", model: [participantInstance: participantInstance])
            return
        }

        flash.message = message(code: 'default.updated.message', args: [message(code: 'event.label', default: 'Event'), participantInstance.id])
        redirect(action: "controlParticipantList", id: participantInstance.evet.id)
    }

    def printCodeBarParticipants(){
        def eventInstance = Event.read(params.id)
        def filename = (randomUUID() as String)+".pdf"
        def pathPdf = servletContext.getRealPath('images')+"/pdf_files/"+filename
        Rectangle pagesize = new Rectangle(252, 324)
        Document document = new Document(pagesize,20,20,200,20)
        def fontPath = servletContext.getRealPath('images')+"/fonts/Cambria.ttf"
        println(fontPath)
        BaseFont cambria = BaseFont.createFont(fontPath, BaseFont.CP1252, BaseFont.EMBEDDED)

        BaseColor subtitleBackColor = new BaseColor(91,155,213)
        BaseColor subtitleTextColor = new BaseColor(255,255,255)

        Font titleFont = new Font(cambria, 16, Font.BOLD)
        Font subTitleFont = new Font(cambria, 14, Font.BOLD)
        subTitleFont.setColor(subtitleTextColor)
        Font normalFont = new Font(cambria,16, Font.NORMAL)
        Font normalFontBold = new Font(cambria,8, Font.BOLD)
        try{
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(pathPdf))

            /*document.setMargins(20, 20, 200, 20)*/
            document.open()
            PdfContentByte cb = pdfWriter.getDirectContent()
            eventInstance.participants.sort {it.id}.each {
                Barcode128 code128 = new Barcode128();
                code128.setCode(it.id+"-"+it.idCardNumber)
                code128.setBarHeight(30f)
                code128.setX(1.3f)
                Image barCodeImage = code128.createImageWithBarcode(cb, null, null)
                barCodeImage.setWidthPercentage(100f)


                PdfPTable principal = new PdfPTable(1)
                principal.setWidths(300f)
                PdfPCell completeName = new PdfPCell(new Phrase(it.name+" "+it.surnames,normalFont))
                completeName.setBorder(0)
                completeName.setHorizontalAlignment(1)
                PdfPCell barcode = new PdfPCell(barCodeImage)
                barcode.setPaddingTop(15f)
                barcode.setBorder(0)
                barcode.setHorizontalAlignment(1)
                principal.addCell(completeName)
                principal.addCell(barcode)
                document.add(principal)
                document.newPage()
            }
            document.close()

        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
